// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// KMedoids__new
SEXP KMedoids__new(IntegerVector k, IntegerVector max_iter, IntegerVector build_confidence, IntegerVector swap_confidence);
RcppExport SEXP _BanditPAM_KMedoids__new(SEXP kSEXP, SEXP max_iterSEXP, SEXP build_confidenceSEXP, SEXP swap_confidenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type build_confidence(build_confidenceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type swap_confidence(swap_confidenceSEXP);
    rcpp_result_gen = Rcpp::wrap(KMedoids__new(k, max_iter, build_confidence, swap_confidence));
    return rcpp_result_gen;
END_RCPP
}
// KMedoids__fit
void KMedoids__fit(SEXP xp, arma::mat data, std::vector< std::string > loss);
RcppExport SEXP _BanditPAM_KMedoids__fit(SEXP xpSEXP, SEXP dataSEXP, SEXP lossSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type loss(lossSEXP);
    KMedoids__fit(xp, data, loss);
    return R_NilValue;
END_RCPP
}
// KMedoids__get_medoids_final
SEXP KMedoids__get_medoids_final(SEXP xp);
RcppExport SEXP _BanditPAM_KMedoids__get_medoids_final(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(KMedoids__get_medoids_final(xp));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BanditPAM_KMedoids__new", (DL_FUNC) &_BanditPAM_KMedoids__new, 4},
    {"_BanditPAM_KMedoids__fit", (DL_FUNC) &_BanditPAM_KMedoids__fit, 3},
    {"_BanditPAM_KMedoids__get_medoids_final", (DL_FUNC) &_BanditPAM_KMedoids__get_medoids_final, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BanditPAM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
